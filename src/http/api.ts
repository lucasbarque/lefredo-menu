/**
 * Generated by orval v7.5.0 🍺
 * Do not edit manually.
 * Alimentados API
 * Confira todas as rotas disponíveis
 * OpenAPI spec version: 1.0
 */
import { customFetch } from '../../custom-fetch';

export type GetUserByRestaurantIdRole =
  (typeof GetUserByRestaurantIdRole)[keyof typeof GetUserByRestaurantIdRole];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const GetUserByRestaurantIdRole = {
  ADMIN: 'ADMIN',
} as const;

export interface GetUserByRestaurantId {
  id: string;
  name: string;
  email: string;
  clerkId: string;
  active: boolean;
  role: GetUserByRestaurantIdRole;
  onboardingFinished: boolean;
  restaurantId: string;
}

export interface CreateMenuDTO {
  [key: string]: unknown;
}

export interface UpdateMenuDTO {
  [key: string]: unknown;
}

export interface SectionDTO {
  id: string;
  title: string;
  description: string;
  slug: string;
  isActive: boolean;
}

export interface DishExtraDTO {
  id: string;
  title: string;
  price: number;
}

export interface DishFlavorsMediaDTO {
  id: string;
  title: string;
  url: string;
}

export interface DishFlavorsDTO {
  id: string;
  title: string;
  label: string;
  price: number;
  description: string;
  dishFlavorsMedias: DishFlavorsMediaDTO[];
}

export interface DishMediasDTO {
  id: string;
  title: string;
  url: string;
}

export type DishSpecKey = (typeof DishSpecKey)[keyof typeof DishSpecKey];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const DishSpecKey = {
  vegetarian: 'vegetarian',
  lactfree: 'lactfree',
  vegan: 'vegan',
  cold: 'cold',
  hot: 'hot',
  organic: 'organic',
  suggarfree: 'suggarfree',
  natural: 'natural',
  highlighted: 'highlighted',
} as const;

export interface DishSpec {
  id: string;
  title: string;
  key: DishSpecKey;
  /** @nullable */
  description: string | null;
}

export interface DishSpecsDTO {
  dishSpecsId: string;
  dishId: string;
  DishSpecs: DishSpec;
}

export interface DishDTO {
  id: string;
  title: string;
  description: string;
  price: number;
  portion: string;
  prepTime: string;
  section: SectionDTO;
  dishExtras: DishExtraDTO[];
  dishFlavors: DishFlavorsDTO[];
  dishMedias: DishMediasDTO[];
  dishSpecs: DishSpecsDTO[];
  dishExtrasOrder: string[];
}

export interface ResponseGetDishesDTO {
  id: string;
  title: string;
  price: number;
  portion: string;
  prepTime: string;
  dishSpecs: DishSpecsDTO[];
  dishMedias: DishMediasDTO[];
  isActive: boolean;
}

export interface RequestCreateDishDTO {
  title: string;
  portion: string;
  price: string;
  /** @nullable */
  prepTime: string | null;
  flagged: string;
  /** @nullable */
  description: string | null;
  sectionId: string;
}

export interface ResponseCreateDishDTO {
  id: string;
}

export interface RequestUpdateDishDTO {
  title: string;
  portion: string;
  price: string;
  /** @nullable */
  prepTime: string | null;
  flagged: string;
  /** @nullable */
  description: string | null;
}

export interface RequestChangePriceDTO {
  price: number;
}

export interface RequestUpdateDishExtrasOrderDTO {
  orderUpdated: string[];
}

export interface RequestUpdateDishFlavorsOrderDTO {
  orderUpdated: string[];
}

export interface RequestUploadDishImageDTO {
  file: string;
}

export interface ResponseUploadDishImageDTO {
  id: string;
  title: string;
  url: string;
}

export interface RequestCreateDishExtraDTO {
  title: string;
  price: string;
}

export interface RequestUpdateDishExtraDTO {
  title: string;
  price: string;
}

export type RequestDishSpecsToggleDTOKey =
  (typeof RequestDishSpecsToggleDTOKey)[keyof typeof RequestDishSpecsToggleDTOKey];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RequestDishSpecsToggleDTOKey = {
  vegetarian: 'vegetarian',
  lactfree: 'lactfree',
  vegan: 'vegan',
  cold: 'cold',
  hot: 'hot',
  organic: 'organic',
  suggarfree: 'suggarfree',
  natural: 'natural',
  highlighted: 'highlighted',
} as const;

export interface RequestDishSpecsToggleDTO {
  key: RequestDishSpecsToggleDTOKey;
}

export type ResponseDishSpecsToggleDTOKey =
  (typeof ResponseDishSpecsToggleDTOKey)[keyof typeof ResponseDishSpecsToggleDTOKey];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ResponseDishSpecsToggleDTOKey = {
  vegetarian: 'vegetarian',
  lactfree: 'lactfree',
  vegan: 'vegan',
  cold: 'cold',
  hot: 'hot',
  organic: 'organic',
  suggarfree: 'suggarfree',
  natural: 'natural',
  highlighted: 'highlighted',
} as const;

export interface ResponseDishSpecsToggleDTO {
  key: ResponseDishSpecsToggleDTOKey;
  oldStateIsActive: boolean;
  newStateIsActive: boolean;
}

export interface RequestCreateDishesFlavorsDTO {
  title: string;
  label: string;
  /** @nullable */
  price: string | null;
  /** @nullable */
  description: string | null;
}

export interface ResponseCreateDishesFlavorsDTO {
  id: string;
  title: string;
  price: number;
  dishId: string;
}

export interface RequestUpdateDishesFlavorsDTO {
  title: string;
  label: string;
  /** @nullable */
  price: string | null;
  /** @nullable */
  description: string | null;
}

export interface RequestUploadDishFlavorImageDTO {
  file: string;
}

export interface ResponseUploadDishFlavorImageDTO {
  id: string;
  title: string;
  url: string;
}

export interface Menu {
  id: string;
  title: string;
}

export interface GetRestaurantBySlugDTO {
  id: string;
  name: string;
  welcomeMessage: string;
  logo: string;
  slug: string;
  Menu: Menu[];
}

export interface GetRestaurantByIdDTO {
  id: string;
  name: string;
  welcomeMessage: string;
  logo: string;
}

export interface UpdateResturantDTO {
  name: string;
  welcomeMessage: string;
}

export interface ChangeLogoDTO {
  file: string;
}

export interface ChangeLogoResponseDTO {
  logo: string;
}

export interface GetRestaurantIsFirstCategoryDTO {
  isFirstCategory: boolean;
}

export interface CreateResturantDTO {
  [key: string]: unknown;
}

export interface ResponseGetSectionByIdDTO {
  id: string;
  title: string;
  /** @nullable */
  description: string | null;
  slug: string;
  isActive: boolean;
}

export interface RequestCreateSectionDTO {
  title: string;
  menuId: string;
  /** @nullable */
  description: string | null;
}

export interface RequestUpdateSectionDTO {
  title: string;
  /** @nullable */
  description: string | null;
}

export type MenusControllerGetByRestaurantParams = {
  restaurantId: string;
};

export type GetDishesBySectionIdParams = {
  sectionId: string;
};

export type RestaurantsControllerListParams = {
  menuId: string;
  restaurantId: string;
};

export type GetSectionsBySlugParams = {
  slug: string;
};

export type GetAllSectionsParams = {
  menuId: string;
};

export type GetActiveSectionsParams = {
  menuId: string;
};

/**
 * @summary Get user by restaurantId
 */
export type getUserByRestaurantIdResponse = {
  data: GetUserByRestaurantId;
  status: number;
  headers: Headers;
};

export const getGetUserByRestaurantIdUrl = (restaurantId: string) => {
  return `/users/restaurant/${restaurantId}`;
};

export const getUserByRestaurantId = async (
  restaurantId: string,
  options?: RequestInit
): Promise<getUserByRestaurantIdResponse> => {
  return customFetch<getUserByRestaurantIdResponse>(
    getGetUserByRestaurantIdUrl(restaurantId),
    {
      ...options,
      method: 'GET',
    }
  );
};

/**
 * @summary Change onboarding status
 */
export type changeOnboardingStatusResponse = {
  data: void;
  status: number;
  headers: Headers;
};

export const getChangeOnboardingStatusUrl = (id: string) => {
  return `/users/change-onboarding-status/${id}`;
};

export const changeOnboardingStatus = async (
  id: string,
  options?: RequestInit
): Promise<changeOnboardingStatusResponse> => {
  return customFetch<changeOnboardingStatusResponse>(
    getChangeOnboardingStatusUrl(id),
    {
      ...options,
      method: 'PATCH',
    }
  );
};

export type menusControllerGetByRestaurantResponse = {
  data: void;
  status: number;
  headers: Headers;
};

export const getMenusControllerGetByRestaurantUrl = (
  params: MenusControllerGetByRestaurantParams
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString());
    }
  });

  return normalizedParams.size
    ? `/menus?${normalizedParams.toString()}`
    : `/menus`;
};

export const menusControllerGetByRestaurant = async (
  params: MenusControllerGetByRestaurantParams,
  options?: RequestInit
): Promise<menusControllerGetByRestaurantResponse> => {
  return customFetch<menusControllerGetByRestaurantResponse>(
    getMenusControllerGetByRestaurantUrl(params),
    {
      ...options,
      method: 'GET',
    }
  );
};

export type menusControllerCreateResponse = {
  data: void;
  status: number;
  headers: Headers;
};

export const getMenusControllerCreateUrl = () => {
  return `/menus`;
};

export const menusControllerCreate = async (
  createMenuDTO: CreateMenuDTO,
  options?: RequestInit
): Promise<menusControllerCreateResponse> => {
  return customFetch<menusControllerCreateResponse>(
    getMenusControllerCreateUrl(),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(createMenuDTO),
    }
  );
};

export type menusControllerGetByIdResponse = {
  data: void;
  status: number;
  headers: Headers;
};

export const getMenusControllerGetByIdUrl = (id: string) => {
  return `/menus/${id}`;
};

export const menusControllerGetById = async (
  id: string,
  options?: RequestInit
): Promise<menusControllerGetByIdResponse> => {
  return customFetch<menusControllerGetByIdResponse>(
    getMenusControllerGetByIdUrl(id),
    {
      ...options,
      method: 'GET',
    }
  );
};

export type menusControllerUpdateResponse = {
  data: void;
  status: number;
  headers: Headers;
};

export const getMenusControllerUpdateUrl = (id: string) => {
  return `/menus/${id}`;
};

export const menusControllerUpdate = async (
  id: string,
  updateMenuDTO: UpdateMenuDTO,
  options?: RequestInit
): Promise<menusControllerUpdateResponse> => {
  return customFetch<menusControllerUpdateResponse>(
    getMenusControllerUpdateUrl(id),
    {
      ...options,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(updateMenuDTO),
    }
  );
};

/**
 * @summary Get Dish By Id
 */
export type getDishByIdResponse = {
  data: DishDTO;
  status: number;
  headers: Headers;
};

export const getGetDishByIdUrl = (id: string) => {
  return `/dishes/${id}`;
};

export const getDishById = async (
  id: string,
  options?: RequestInit
): Promise<getDishByIdResponse> => {
  return customFetch<getDishByIdResponse>(getGetDishByIdUrl(id), {
    ...options,
    method: 'GET',
  });
};

/**
 * @summary Update Dish
 */
export type updateDishResponse = {
  data: ResponseCreateDishDTO;
  status: number;
  headers: Headers;
};

export const getUpdateDishUrl = (id: string) => {
  return `/dishes/${id}`;
};

export const updateDish = async (
  id: string,
  requestUpdateDishDTO: RequestUpdateDishDTO,
  options?: RequestInit
): Promise<updateDishResponse> => {
  return customFetch<updateDishResponse>(getUpdateDishUrl(id), {
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(requestUpdateDishDTO),
  });
};

/**
 * @summary Delete dish
 */
export type deleteDishResponse = {
  data: void;
  status: number;
  headers: Headers;
};

export const getDeleteDishUrl = (id: string) => {
  return `/dishes/${id}`;
};

export const deleteDish = async (
  id: string,
  options?: RequestInit
): Promise<deleteDishResponse> => {
  return customFetch<deleteDishResponse>(getDeleteDishUrl(id), {
    ...options,
    method: 'DELETE',
  });
};

/**
 * @summary Get Dishes
 */
export type getDishesBySlugResponse = {
  data: ResponseGetDishesDTO[];
  status: number;
  headers: Headers;
};

export const getGetDishesBySlugUrl = (slug: string) => {
  return `/dishes/slug/${slug}`;
};

export const getDishesBySlug = async (
  slug: string,
  options?: RequestInit
): Promise<getDishesBySlugResponse> => {
  return customFetch<getDishesBySlugResponse>(getGetDishesBySlugUrl(slug), {
    ...options,
    method: 'GET',
  });
};

/**
 * @summary Get Dishes
 */
export type getDishesBySectionIdResponse = {
  data: ResponseGetDishesDTO[];
  status: number;
  headers: Headers;
};

export const getGetDishesBySectionIdUrl = (
  params: GetDishesBySectionIdParams
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString());
    }
  });

  return normalizedParams.size
    ? `/dishes?${normalizedParams.toString()}`
    : `/dishes`;
};

export const getDishesBySectionId = async (
  params: GetDishesBySectionIdParams,
  options?: RequestInit
): Promise<getDishesBySectionIdResponse> => {
  return customFetch<getDishesBySectionIdResponse>(
    getGetDishesBySectionIdUrl(params),
    {
      ...options,
      method: 'GET',
    }
  );
};

/**
 * @summary Create Dish
 */
export type createDishResponse = {
  data: ResponseCreateDishDTO;
  status: number;
  headers: Headers;
};

export const getCreateDishUrl = () => {
  return `/dishes`;
};

export const createDish = async (
  requestCreateDishDTO: RequestCreateDishDTO,
  options?: RequestInit
): Promise<createDishResponse> => {
  return customFetch<createDishResponse>(getCreateDishUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(requestCreateDishDTO),
  });
};

/**
 * @summary Toggle Section
 */
export type toggleDishResponse = {
  data: void;
  status: number;
  headers: Headers;
};

export const getToggleDishUrl = (id: string) => {
  return `/dishes/toggle/${id}`;
};

export const toggleDish = async (
  id: string,
  options?: RequestInit
): Promise<toggleDishResponse> => {
  return customFetch<toggleDishResponse>(getToggleDishUrl(id), {
    ...options,
    method: 'PATCH',
  });
};

/**
 * @summary Change Price
 */
export type changePriceResponse = {
  data: void;
  status: number;
  headers: Headers;
};

export const getChangePriceUrl = (id: string) => {
  return `/dishes/change-price/${id}`;
};

export const changePrice = async (
  id: string,
  requestChangePriceDTO: RequestChangePriceDTO,
  options?: RequestInit
): Promise<changePriceResponse> => {
  return customFetch<changePriceResponse>(getChangePriceUrl(id), {
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(requestChangePriceDTO),
  });
};

/**
 * @summary Update Dish Extras Order
 */
export type updateDishExtrasOrderResponse = {
  data: void;
  status: number;
  headers: Headers;
};

export const getUpdateDishExtrasOrderUrl = (id: string) => {
  return `/dishes/update-dish-extras-order/${id}`;
};

export const updateDishExtrasOrder = async (
  id: string,
  requestUpdateDishExtrasOrderDTO: RequestUpdateDishExtrasOrderDTO,
  options?: RequestInit
): Promise<updateDishExtrasOrderResponse> => {
  return customFetch<updateDishExtrasOrderResponse>(
    getUpdateDishExtrasOrderUrl(id),
    {
      ...options,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(requestUpdateDishExtrasOrderDTO),
    }
  );
};

/**
 * @summary Update Dish Flavors Order
 */
export type updateDishFlavorsOrderResponse = {
  data: void;
  status: number;
  headers: Headers;
};

export const getUpdateDishFlavorsOrderUrl = (id: string) => {
  return `/dishes/update-dish-flavors-order/${id}`;
};

export const updateDishFlavorsOrder = async (
  id: string,
  requestUpdateDishFlavorsOrderDTO: RequestUpdateDishFlavorsOrderDTO,
  options?: RequestInit
): Promise<updateDishFlavorsOrderResponse> => {
  return customFetch<updateDishFlavorsOrderResponse>(
    getUpdateDishFlavorsOrderUrl(id),
    {
      ...options,
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(requestUpdateDishFlavorsOrderDTO),
    }
  );
};

/**
 * @summary Upload dish image
 */
export type uploadDishImageResponse = {
  data: ResponseUploadDishImageDTO;
  status: number;
  headers: Headers;
};

export const getUploadDishImageUrl = (id: string) => {
  return `/dishes/${id}/upload-image`;
};

export const uploadDishImage = async (
  id: string,
  requestUploadDishImageDTO: RequestUploadDishImageDTO,
  options?: RequestInit
): Promise<uploadDishImageResponse> => {
  const formData = new FormData();
  formData.append('file', requestUploadDishImageDTO.file);

  return customFetch<uploadDishImageResponse>(getUploadDishImageUrl(id), {
    ...options,
    method: 'PATCH',
    body: formData,
  });
};

/**
 * @summary Delete Dish image
 */
export type deleteDishImageResponse = {
  data: void;
  status: number;
  headers: Headers;
};

export const getDeleteDishImageUrl = (id: string) => {
  return `/dishes/delete-image/${id}`;
};

export const deleteDishImage = async (
  id: string,
  options?: RequestInit
): Promise<deleteDishImageResponse> => {
  return customFetch<deleteDishImageResponse>(getDeleteDishImageUrl(id), {
    ...options,
    method: 'DELETE',
  });
};

/**
 * @summary Get Dishes Extras
 */
export type getDishesExtrasResponse = {
  data: DishExtraDTO[];
  status: number;
  headers: Headers;
};

export const getGetDishesExtrasUrl = (dishId: string) => {
  return `/dishes-extras/${dishId}`;
};

export const getDishesExtras = async (
  dishId: string,
  options?: RequestInit
): Promise<getDishesExtrasResponse> => {
  return customFetch<getDishesExtrasResponse>(getGetDishesExtrasUrl(dishId), {
    ...options,
    method: 'GET',
  });
};

/**
 * @summary Create Dish Extra
 */
export type createDishesExtraResponse = {
  data: DishExtraDTO;
  status: number;
  headers: Headers;
};

export const getCreateDishesExtraUrl = (dishId: string) => {
  return `/dishes-extras/${dishId}`;
};

export const createDishesExtra = async (
  dishId: string,
  requestCreateDishExtraDTO: RequestCreateDishExtraDTO,
  options?: RequestInit
): Promise<createDishesExtraResponse> => {
  return customFetch<createDishesExtraResponse>(
    getCreateDishesExtraUrl(dishId),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(requestCreateDishExtraDTO),
    }
  );
};

/**
 * @summary Update Dish Extra
 */
export type updateDishesExtraResponse = {
  data: DishExtraDTO;
  status: number;
  headers: Headers;
};

export const getUpdateDishesExtraUrl = (id: string) => {
  return `/dishes-extras/${id}`;
};

export const updateDishesExtra = async (
  id: string,
  requestUpdateDishExtraDTO: RequestUpdateDishExtraDTO,
  options?: RequestInit
): Promise<updateDishesExtraResponse> => {
  return customFetch<updateDishesExtraResponse>(getUpdateDishesExtraUrl(id), {
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(requestUpdateDishExtraDTO),
  });
};

/**
 * @summary Delete Dish Extra
 */
export type deleteDishesExtraResponse = {
  data: void;
  status: number;
  headers: Headers;
};

export const getDeleteDishesExtraUrl = (id: string) => {
  return `/dishes-extras/${id}`;
};

export const deleteDishesExtra = async (
  id: string,
  options?: RequestInit
): Promise<deleteDishesExtraResponse> => {
  return customFetch<deleteDishesExtraResponse>(getDeleteDishesExtraUrl(id), {
    ...options,
    method: 'DELETE',
  });
};

/**
 * @summary Get Dishes Specs
 */
export type getDishesSpecsResponse = {
  data: DishSpecsDTO[];
  status: number;
  headers: Headers;
};

export const getGetDishesSpecsUrl = (dishId: string) => {
  return `/dishes-specs/${dishId}`;
};

export const getDishesSpecs = async (
  dishId: string,
  options?: RequestInit
): Promise<getDishesSpecsResponse> => {
  return customFetch<getDishesSpecsResponse>(getGetDishesSpecsUrl(dishId), {
    ...options,
    method: 'GET',
  });
};

/**
 * @summary Toggle Dish Spec
 */
export type toggleDishesSpecResponse = {
  data: ResponseDishSpecsToggleDTO;
  status: number;
  headers: Headers;
};

export const getToggleDishesSpecUrl = (dishId: string) => {
  return `/dishes-specs/${dishId}`;
};

export const toggleDishesSpec = async (
  dishId: string,
  requestDishSpecsToggleDTO: RequestDishSpecsToggleDTO,
  options?: RequestInit
): Promise<toggleDishesSpecResponse> => {
  return customFetch<toggleDishesSpecResponse>(getToggleDishesSpecUrl(dishId), {
    ...options,
    method: 'PATCH',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(requestDishSpecsToggleDTO),
  });
};

/**
 * @summary Get Dishes Flavors
 */
export type getDishesFlavorsResponse = {
  data: DishFlavorsDTO[];
  status: number;
  headers: Headers;
};

export const getGetDishesFlavorsUrl = (dishId: string) => {
  return `/dishes-flavors/${dishId}`;
};

export const getDishesFlavors = async (
  dishId: string,
  options?: RequestInit
): Promise<getDishesFlavorsResponse> => {
  return customFetch<getDishesFlavorsResponse>(getGetDishesFlavorsUrl(dishId), {
    ...options,
    method: 'GET',
  });
};

/**
 * @summary Create Dish Flavors
 */
export type createDishesFlavorsResponse = {
  data: ResponseCreateDishesFlavorsDTO[];
  status: number;
  headers: Headers;
};

export const getCreateDishesFlavorsUrl = (dishId: string) => {
  return `/dishes-flavors/${dishId}`;
};

export const createDishesFlavors = async (
  dishId: string,
  requestCreateDishesFlavorsDTO: RequestCreateDishesFlavorsDTO,
  options?: RequestInit
): Promise<createDishesFlavorsResponse> => {
  return customFetch<createDishesFlavorsResponse>(
    getCreateDishesFlavorsUrl(dishId),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(requestCreateDishesFlavorsDTO),
    }
  );
};

/**
 * @summary Update Dish Flavors
 */
export type updateDishesFlavorsResponse = {
  data: void;
  status: number;
  headers: Headers;
};

export const getUpdateDishesFlavorsUrl = (id: string) => {
  return `/dishes-flavors/${id}`;
};

export const updateDishesFlavors = async (
  id: string,
  requestUpdateDishesFlavorsDTO: RequestUpdateDishesFlavorsDTO,
  options?: RequestInit
): Promise<updateDishesFlavorsResponse> => {
  return customFetch<updateDishesFlavorsResponse>(
    getUpdateDishesFlavorsUrl(id),
    {
      ...options,
      method: 'PUT',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(requestUpdateDishesFlavorsDTO),
    }
  );
};

/**
 * @summary Delete Dish Flavors
 */
export type deleteDishesFlavorsResponse = {
  data: void;
  status: number;
  headers: Headers;
};

export const getDeleteDishesFlavorsUrl = (id: string) => {
  return `/dishes-flavors/${id}`;
};

export const deleteDishesFlavors = async (
  id: string,
  options?: RequestInit
): Promise<deleteDishesFlavorsResponse> => {
  return customFetch<deleteDishesFlavorsResponse>(
    getDeleteDishesFlavorsUrl(id),
    {
      ...options,
      method: 'DELETE',
    }
  );
};

/**
 * @summary Upload dish flavor image
 */
export type uploadDishFlavorImageResponse = {
  data: ResponseUploadDishFlavorImageDTO;
  status: number;
  headers: Headers;
};

export const getUploadDishFlavorImageUrl = (id: string) => {
  return `/dishes-flavors/${id}/upload-image`;
};

export const uploadDishFlavorImage = async (
  id: string,
  requestUploadDishFlavorImageDTO: RequestUploadDishFlavorImageDTO,
  options?: RequestInit
): Promise<uploadDishFlavorImageResponse> => {
  const formData = new FormData();
  formData.append('file', requestUploadDishFlavorImageDTO.file);

  return customFetch<uploadDishFlavorImageResponse>(
    getUploadDishFlavorImageUrl(id),
    {
      ...options,
      method: 'PATCH',
      body: formData,
    }
  );
};

/**
 * @summary Delete Dish Flavor Media image
 */
export type deleteDishFlavorMediaImageResponse = {
  data: void;
  status: number;
  headers: Headers;
};

export const getDeleteDishFlavorMediaImageUrl = (id: string) => {
  return `/dishes-flavors/delete-image/${id}`;
};

export const deleteDishFlavorMediaImage = async (
  id: string,
  options?: RequestInit
): Promise<deleteDishFlavorMediaImageResponse> => {
  return customFetch<deleteDishFlavorMediaImageResponse>(
    getDeleteDishFlavorMediaImageUrl(id),
    {
      ...options,
      method: 'DELETE',
    }
  );
};

export type restaurantsControllerListResponse = {
  data: void;
  status: number;
  headers: Headers;
};

export const getRestaurantsControllerListUrl = (
  params: RestaurantsControllerListParams
) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString());
    }
  });

  return normalizedParams.size
    ? `/restaurants?${normalizedParams.toString()}`
    : `/restaurants`;
};

export const restaurantsControllerList = async (
  params: RestaurantsControllerListParams,
  options?: RequestInit
): Promise<restaurantsControllerListResponse> => {
  return customFetch<restaurantsControllerListResponse>(
    getRestaurantsControllerListUrl(params),
    {
      ...options,
      method: 'GET',
    }
  );
};

export type restaurantsControllerCreateResponse = {
  data: void;
  status: number;
  headers: Headers;
};

export const getRestaurantsControllerCreateUrl = () => {
  return `/restaurants`;
};

export const restaurantsControllerCreate = async (
  createResturantDTO: CreateResturantDTO,
  options?: RequestInit
): Promise<restaurantsControllerCreateResponse> => {
  return customFetch<restaurantsControllerCreateResponse>(
    getRestaurantsControllerCreateUrl(),
    {
      ...options,
      method: 'POST',
      headers: { 'Content-Type': 'application/json', ...options?.headers },
      body: JSON.stringify(createResturantDTO),
    }
  );
};

/**
 * @summary Get Restaurant By Slug
 */
export type getRestaurantBySlugResponse = {
  data: GetRestaurantBySlugDTO;
  status: number;
  headers: Headers;
};

export const getGetRestaurantBySlugUrl = (slug: string) => {
  return `/restaurants/slug/${slug}`;
};

export const getRestaurantBySlug = async (
  slug: string,
  options?: RequestInit
): Promise<getRestaurantBySlugResponse> => {
  return customFetch<getRestaurantBySlugResponse>(
    getGetRestaurantBySlugUrl(slug),
    {
      ...options,
      method: 'GET',
    }
  );
};

/**
 * @summary Get Restaurant By Id
 */
export type getRestaurantByIdResponse = {
  data: GetRestaurantByIdDTO;
  status: number;
  headers: Headers;
};

export const getGetRestaurantByIdUrl = (id: string) => {
  return `/restaurants/${id}`;
};

export const getRestaurantById = async (
  id: string,
  options?: RequestInit
): Promise<getRestaurantByIdResponse> => {
  return customFetch<getRestaurantByIdResponse>(getGetRestaurantByIdUrl(id), {
    ...options,
    method: 'GET',
  });
};

/**
 * @summary Update Restaurant
 */
export type updateRestaurantResponse = {
  data: void;
  status: number;
  headers: Headers;
};

export const getUpdateRestaurantUrl = (id: string) => {
  return `/restaurants/${id}`;
};

export const updateRestaurant = async (
  id: string,
  updateResturantDTO: UpdateResturantDTO,
  options?: RequestInit
): Promise<updateRestaurantResponse> => {
  return customFetch<updateRestaurantResponse>(getUpdateRestaurantUrl(id), {
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(updateResturantDTO),
  });
};

/**
 * @summary Change Logo
 */
export type changeLogoRestaurantResponse = {
  data: ChangeLogoResponseDTO;
  status: number;
  headers: Headers;
};

export const getChangeLogoRestaurantUrl = (id: string) => {
  return `/restaurants/${id}/change-logo`;
};

export const changeLogoRestaurant = async (
  id: string,
  changeLogoDTO: ChangeLogoDTO,
  options?: RequestInit
): Promise<changeLogoRestaurantResponse> => {
  const formData = new FormData();
  formData.append('file', changeLogoDTO.file);

  return customFetch<changeLogoRestaurantResponse>(
    getChangeLogoRestaurantUrl(id),
    {
      ...options,
      method: 'PATCH',
      body: formData,
    }
  );
};

/**
 * @summary Delete Logo
 */
export type deleteLogoRestaurantResponse = {
  data: void;
  status: number;
  headers: Headers;
};

export const getDeleteLogoRestaurantUrl = (id: string) => {
  return `/restaurants/${id}/delete-logo`;
};

export const deleteLogoRestaurant = async (
  id: string,
  options?: RequestInit
): Promise<deleteLogoRestaurantResponse> => {
  return customFetch<deleteLogoRestaurantResponse>(
    getDeleteLogoRestaurantUrl(id),
    {
      ...options,
      method: 'PATCH',
    }
  );
};

/**
 * @summary Get restaurant is first category information
 */
export type getRestaurantIsFirstCategoryResponse = {
  data: GetRestaurantIsFirstCategoryDTO;
  status: number;
  headers: Headers;
};

export const getGetRestaurantIsFirstCategoryUrl = (id: string) => {
  return `/restaurants/is-first-category/${id}`;
};

export const getRestaurantIsFirstCategory = async (
  id: string,
  options?: RequestInit
): Promise<getRestaurantIsFirstCategoryResponse> => {
  return customFetch<getRestaurantIsFirstCategoryResponse>(
    getGetRestaurantIsFirstCategoryUrl(id),
    {
      ...options,
      method: 'GET',
    }
  );
};

/**
 * @summary Get Sections by Slug
 */
export type getSectionsBySlugResponse = {
  data: SectionDTO[];
  status: number;
  headers: Headers;
};

export const getGetSectionsBySlugUrl = (params: GetSectionsBySlugParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString());
    }
  });

  return normalizedParams.size
    ? `/sections?${normalizedParams.toString()}`
    : `/sections`;
};

export const getSectionsBySlug = async (
  params: GetSectionsBySlugParams,
  options?: RequestInit
): Promise<getSectionsBySlugResponse> => {
  return customFetch<getSectionsBySlugResponse>(
    getGetSectionsBySlugUrl(params),
    {
      ...options,
      method: 'GET',
    }
  );
};

/**
 * @summary Create Section
 */
export type createSectionResponse = {
  data: void;
  status: number;
  headers: Headers;
};

export const getCreateSectionUrl = () => {
  return `/sections`;
};

export const createSection = async (
  requestCreateSectionDTO: RequestCreateSectionDTO,
  options?: RequestInit
): Promise<createSectionResponse> => {
  return customFetch<createSectionResponse>(getCreateSectionUrl(), {
    ...options,
    method: 'POST',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(requestCreateSectionDTO),
  });
};

/**
 * @summary Get All Sections
 */
export type getAllSectionsResponse = {
  data: SectionDTO[];
  status: number;
  headers: Headers;
};

export const getGetAllSectionsUrl = (params: GetAllSectionsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString());
    }
  });

  return normalizedParams.size
    ? `/sections/get-all?${normalizedParams.toString()}`
    : `/sections/get-all`;
};

export const getAllSections = async (
  params: GetAllSectionsParams,
  options?: RequestInit
): Promise<getAllSectionsResponse> => {
  return customFetch<getAllSectionsResponse>(getGetAllSectionsUrl(params), {
    ...options,
    method: 'GET',
  });
};

/**
 * @summary Get active Sections
 */
export type getActiveSectionsResponse = {
  data: SectionDTO[];
  status: number;
  headers: Headers;
};

export const getGetActiveSectionsUrl = (params: GetActiveSectionsParams) => {
  const normalizedParams = new URLSearchParams();

  Object.entries(params || {}).forEach(([key, value]) => {
    if (value !== undefined) {
      normalizedParams.append(key, value === null ? 'null' : value.toString());
    }
  });

  return normalizedParams.size
    ? `/sections/get-active?${normalizedParams.toString()}`
    : `/sections/get-active`;
};

export const getActiveSections = async (
  params: GetActiveSectionsParams,
  options?: RequestInit
): Promise<getActiveSectionsResponse> => {
  return customFetch<getActiveSectionsResponse>(
    getGetActiveSectionsUrl(params),
    {
      ...options,
      method: 'GET',
    }
  );
};

/**
 * @summary Get Section By Id
 */
export type getSectionByIdResponse = {
  data: ResponseGetSectionByIdDTO;
  status: number;
  headers: Headers;
};

export const getGetSectionByIdUrl = (id: string) => {
  return `/sections/${id}`;
};

export const getSectionById = async (
  id: string,
  options?: RequestInit
): Promise<getSectionByIdResponse> => {
  return customFetch<getSectionByIdResponse>(getGetSectionByIdUrl(id), {
    ...options,
    method: 'GET',
  });
};

/**
 * @summary Delete Section
 */
export type deleteSectionResponse = {
  data: void;
  status: number;
  headers: Headers;
};

export const getDeleteSectionUrl = (id: string) => {
  return `/sections/${id}`;
};

export const deleteSection = async (
  id: string,
  options?: RequestInit
): Promise<deleteSectionResponse> => {
  return customFetch<deleteSectionResponse>(getDeleteSectionUrl(id), {
    ...options,
    method: 'DELETE',
  });
};

/**
 * @summary Update Section
 */
export type updateSectionResponse = {
  data: void;
  status: number;
  headers: Headers;
};

export const getUpdateSectionUrl = (id: string) => {
  return `/sections/${id}`;
};

export const updateSection = async (
  id: string,
  requestUpdateSectionDTO: RequestUpdateSectionDTO,
  options?: RequestInit
): Promise<updateSectionResponse> => {
  return customFetch<updateSectionResponse>(getUpdateSectionUrl(id), {
    ...options,
    method: 'PUT',
    headers: { 'Content-Type': 'application/json', ...options?.headers },
    body: JSON.stringify(requestUpdateSectionDTO),
  });
};

/**
 * @summary Toggle Section
 */
export type toggleSectionResponse = {
  data: void;
  status: number;
  headers: Headers;
};

export const getToggleSectionUrl = (id: string) => {
  return `/sections/toggle/${id}`;
};

export const toggleSection = async (
  id: string,
  options?: RequestInit
): Promise<toggleSectionResponse> => {
  return customFetch<toggleSectionResponse>(getToggleSectionUrl(id), {
    ...options,
    method: 'PATCH',
  });
};

/**
 * @summary Get all categories report
 */
export type getAllCategoriesReportResponse = {
  data: number;
  status: number;
  headers: Headers;
};

export const getGetAllCategoriesReportUrl = (menuId: string) => {
  return `/reports/get-all-categories/${menuId}`;
};

export const getAllCategoriesReport = async (
  menuId: string,
  options?: RequestInit
): Promise<getAllCategoriesReportResponse> => {
  return customFetch<getAllCategoriesReportResponse>(
    getGetAllCategoriesReportUrl(menuId),
    {
      ...options,
      method: 'GET',
    }
  );
};

/**
 * @summary Get all dishes report
 */
export type getAllDishesReportResponse = {
  data: number;
  status: number;
  headers: Headers;
};

export const getGetAllDishesReportUrl = (menuId: string) => {
  return `/reports/get-all-dishes/${menuId}`;
};

export const getAllDishesReport = async (
  menuId: string,
  options?: RequestInit
): Promise<getAllDishesReportResponse> => {
  return customFetch<getAllDishesReportResponse>(
    getGetAllDishesReportUrl(menuId),
    {
      ...options,
      method: 'GET',
    }
  );
};

/**
 * @summary Get all dish flavors report
 */
export type getAllDishFlavorsReportResponse = {
  data: number;
  status: number;
  headers: Headers;
};

export const getGetAllDishFlavorsReportUrl = (menuId: string) => {
  return `/reports/get-all-dish-flavors/${menuId}`;
};

export const getAllDishFlavorsReport = async (
  menuId: string,
  options?: RequestInit
): Promise<getAllDishFlavorsReportResponse> => {
  return customFetch<getAllDishFlavorsReportResponse>(
    getGetAllDishFlavorsReportUrl(menuId),
    {
      ...options,
      method: 'GET',
    }
  );
};

/**
 * @summary Has logo report
 */
export type hasLogoReportResponse = {
  data: boolean;
  status: number;
  headers: Headers;
};

export const getHasLogoReportUrl = (restaurantId: string) => {
  return `/reports/has-logo/${restaurantId}`;
};

export const hasLogoReport = async (
  restaurantId: string,
  options?: RequestInit
): Promise<hasLogoReportResponse> => {
  return customFetch<hasLogoReportResponse>(getHasLogoReportUrl(restaurantId), {
    ...options,
    method: 'GET',
  });
};

/**
 * @summary Has active category report
 */
export type hasActiveCategoryReportResponse = {
  data: boolean;
  status: number;
  headers: Headers;
};

export const getHasActiveCategoryReportUrl = (menuId: string) => {
  return `/reports/has-active-category/${menuId}`;
};

export const hasActiveCategoryReport = async (
  menuId: string,
  options?: RequestInit
): Promise<hasActiveCategoryReportResponse> => {
  return customFetch<hasActiveCategoryReportResponse>(
    getHasActiveCategoryReportUrl(menuId),
    {
      ...options,
      method: 'GET',
    }
  );
};
